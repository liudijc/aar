
namespace zmq{
	import zeromq;
	import console;

zmq = function(){
	
	var context = zeromq.context(1)

//replay模式socket与客户端的request模式配对使用
var responder = context.zmq_socket_reply()

if( ! responder.bind(  "tcp://*:5559") ){ 
    console.log( zeromq.lasterr() );  
    return;
}
console.log("服务端已启动")

while (1) {

    var msg = zeromq.message();
    if( ! responder.recvMsg(msg) ){
        console.log( zeromq.lasterr() )
    }
    console.log("服务端收到消息",msg.getString() );
    msg.close();


    //在这里可以添加其他代码
    sleep (1); 

    // 发送消息
    msgReply = zeromq.message("客户十点读书ss"); 
   	responder.sendMsg(msgReply);
    msgReply.close();

    //上面的代码也可以简化为一句,如下:
    //responder.send("客户端你好")
	console.log("响应完毕")
	 
}

//上面的代码会一直循环不会中断, 
//如果使用break语句中断,则执行下面的代码释放资源 
responder.close(); 
context.term();

	
	
	
}
akk =function(){
   import chrome.app;
   import win;
var app = chrome.app();

/*
在下面的external对象中指定允许chrome中使用JS直接调用的函数
在网页中直接引用"/aardio.js"下面的external 会自动转换为js中的aardio对象.
"/aardio.js"是由 aardio虚拟的JS文件(不用自己准备这个文件)。
*/
app.external = {
    
    //加载一个页面完成会触发这个事件(要求引用了"/aardio.js")
    onLoadUrl = function(url){
        
        //接收js函数的返回值
		app.callback("hello",function(hSocket,result,err){
			app.msgbox(result : err,"调用js的hello函数以后返回值了");
	    })

        //调用JS函数
        app.survey("hello","aardio");
    } 
    test = function(){
       app.msgbox("chrome调用了aardio函数")
    } 
}

//WebSocke/RPC中遇到的错误都会触发这个函数,可以在这里自定义错误处理方式
app.ws.onError = function(hSocket,err){
	errput(err,"chrome/rpc error");//当然也可以在 global.onError 里自定义全部的错误信息怎么显示
}

//正式的启动chrome进程，aardio会自动把下面的文件转换为服务端请求
app.start("/res/2.aardio");

//网页中可以调用 aardio.quit() 退出,也可以直接关闭chrome窗口退出
win.loopMessage();

  





    
    
    
	
}





	
	
	
	
}
